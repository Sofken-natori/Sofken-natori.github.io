'use strict';

import { C, CPPEnt, Code } from '../../components';

export default function CPPEntLoop(): JSX.Element {
    return (
        <CPPEnt slug="loop">
            <p>
                同じ処理を繰り返したい時、パラメーター違うだけの似たような処理を書く時...<br />
                そのまま同じようなコードを書くのは大変です。<wbr />
                そこでループ処理の登場です。では、目的によって使い分けるループ処理を紹介していきます。
            </p>
            <h3 id="while">while</h3>
            <p>
                条件に合致している間処理を繰り返すループです。<wbr />
                回数が特に決まってない・分からない場合に使います。
            </p>
            <Code content={
                `while(条件) {\n` +
                `    処理\n` +
                `}`
            } lang="cpp" />
            <p>
                「条件が真か」→「処理」→「条件が真か」→...と処理されます。<wbr />
                そのため、条件によっては1回も実行されない場合があります。<br />
                必ず1回は実行して欲しい場合はdo-while文を使います。
            </p>
            <Code content={
                `do {\n` +
                `    処理\n` +
                `} while(条件);`
            } lang="cpp" />
            <h3 id="for">for</h3>
            <p>
                条件に合致している間処理を繰り返すループです。<wbr />
                回数が決まっている・事前に分かる場合に使います。
            </p>
            <Code content={
                `for(初期化式; 条件; 更新式) {\n` +
                `    処理\n` +
                `}`
            } lang="cpp" />
            <p>
                「初期化式」→「条件が真か」→「処理」→「更新式」→「条件が真か」→...と処理されます。<br />
                一般に、以下のような使い方をします。
            </p>
            <Code content={
                `// 処理を"回数"だけ繰り返す処理。iはforの中でのみ使える。\n` +
                `for(int i = 0; i < 回数; i++) {\n` +
                `    処理\n` +
                `}`
            } lang="cpp" />
            <p>
                また、配列のi番目を使う、と言った感じで配列の中身を順番に処理する目的でも使われました。<br />
                しかし、次に紹介する範囲for文(通称foreach文)の登場によってその用途ではあまり使われなくなりました。
            </p>
            <h3 id="範囲for文">範囲for文</h3>
            <p>
                配列の中身を1つずつ順番に処理するループです。
            </p>
            <Code content={
                `for(型 変数 : 配列) {\n` +
                `    処理\n` +
                `}`
            } lang="cpp" />
            <p>
                型は配列の中身の型です。(<C>int</C>の配列であれば<C>int</C>)<wbr />
                ですが大抵は<C>auto</C>を指定します。<br />
                変数には配列の中身が1つずつ格納され、処理の中で使う事が出来ます。
            </p>
            <h3 id="continue・break">continue・break</h3>
            <p>
                ループ処理の中で途中で抜ける・処理の途中で次の処理に切り替える場合は、<wbr />
                それぞれ<C>break</C>文、<C>continue</C>文を使います。
            </p>
            <h3 id="無限ループ">無限ループ</h3>
            <p>
                例えばゲームだったりロボットの制御プログラムなど、終了するまでずっとループして欲しいプログラムの場合、<wbr />
                終了条件を書いてループさせるのもいいですが、大抵は無限ループが用いられます。<br />
                無限ループは<C>while</C>と<C>for</C>のどちらでも書けますが<C>while</C>で書かれる傾向があります。<sup>[要出典]</sup>
            </p>
            <Code content={
                `// boolが無い時代のC言語に見られる書き方(1は0ではないためtrue)\n` +
                `while(1) {\n` +
                `    処理\n` +
                `}\n` +
                `\n` +
                `// C++にはboolが標準で実装されているため可視性を考えてもこっちを推奨\n` +
                `while(true) {\n` +
                `    処理\n` +
                `}\n` +
                `\n` +
                `// forの式を省略できる事を利用した書き方\n` +
                `for(;;) {\n` +
                `    処理\n` +
                `}`
            } lang="cpp" />
            <p>
                条件が設定されていないため抜けるには<C>break</C>文を使います。
            </p>
        </CPPEnt>
    );
}
