'use strict';

import { C, CPPEnt, CPPEntLink, Code } from '../../components';
import type { JSX } from 'react';

export default function CPPEntReference(): JSX.Element {
    return (
        <CPPEnt slug="reference">
            <p>
                プログラムで使う変数などは実行時にメモリ(RAMなど)に展開され、利用されます。<br />
                当然、メモリは大量に利用すれば空きがなくなりますし、<wbr />
                何より大きいデータの場合、展開自体に時間が掛かってしまいます。<br />
                別の変数への代入や関数の引数として渡す時、内部的にはコピーが行われます。<br />
                その結果、処理速度が遅くなったりメモリが枯渇する、いわゆる「重い」状態となってしまいます。
            </p>
            <p>
                そこで、このポインタや参照型の出番です。<br />
                まずC言語由来のポインタ、C++で追加された参照型、そしてC++11・14で追加されたスマートポインタの順で解説していきます。
            </p>
            <h3 id="ポインタ">ポインタ</h3>
            <p>
                C言語由来の古い機能で、使わなくはないですが、<wbr />
                後述の2つがあるC++においては狙って使う程の物ではないです。<br />
                メモリの場所を表す<CPPEntLink anchor="#アドレス" name="アドレス" slug="dictionary" />を数値としてそのまま保持しています。<br />
                そのため数値として計算する事が出来ます。(サイズはマシンのbit数(64bit機であれば<C>long long</C>相当))
            </p>
            <Code content={`
                // 例としてint型のポインタを宣言する。*の位置とか前後の空白は好きに出来るので以下3つは全てOK
                int* a;
                int * a;
                int *a;
                // ただし、*aでint型のデータを参照できるため3つ目が良い(とか言うと派閥争いに巻き込まれるので注意)
                // また、先述の通り普通に数値として計算できると言ったがこれは例えば、
                char *a = "abc";
                char *b = a + 1;
                // とした時、bにアクセスすると"bc"が取得出来る。
            `} indent={16} lang="cpp" />
            <p>
                このポインタはこの通り数値で簡単に増減出来るため、<wbr />
                上記のように自分で分かる範囲であれば問題ありませんが、<br />
                そうでない範囲の場合、どんな値が入っているか分からない上、<wbr />
                範囲によってはOSが強制再起動する事もあるため、注意して使う必要があります。
            </p>
            <p>
                また、以下のようにポインタとその場所の実際のデータは以下のように相互変換出来ます。
            </p>
            <Code content={`
                // 普通のデータ
                int a;
                // aが格納されているアドレスを代入
                int *b = &a; // &でアドレスを取得
                // bの指すアドレスに格納されているデータ(=a)の内容をコピー
                int c = *b; // *でデータを取得
            `} indent={16} lang="cpp" />
        </CPPEnt>
    );
}
